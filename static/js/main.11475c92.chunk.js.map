{"version":3,"sources":["App.js","index.js"],"names":["App","allCells","Array","fill","useState","cells","setCells","turn","setTurn","isGameOver","setIsGameOver","winningState","getClassName","id","className","map","cell","index","onClick","newState","some","winningSet","console","log","every","indices","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA2DeA,EAxDH,WACV,IAAMC,EAAWC,MAAM,GAAGC,KAAK,GAC/B,EAA0BC,mBAASH,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACMC,EAAe,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAgBpGC,EAAe,SAACC,GACpB,GAAW,IAAPA,EAGC,OAAW,IAAPA,EACA,QAEO,IAAPA,EACA,cADJ,GAIP,OACE,qBAAKC,UAAU,UAAf,SAEKL,EAUC,qBAAKK,UAAU,YAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,iBAAf,uBACA,qBAAKA,UAAU,mBAAf,mBAA+C,IAATP,EAAa,SAAW,QAA9D,gBAZJ,qBAAKO,UAAU,OAAf,SAEIb,EAASc,KAAI,SAACC,EAAMC,GAAP,OACX,qBAAiBH,UAAU,OAAOI,QAAS,kBAjCrC,SAACL,GACnB,GAAkB,IAAdR,EAAMQ,GAAV,CAGA,IAAMM,EAAQ,YAAOd,GACrBc,EAASN,GAAMN,EACfD,EAASa,GACTX,EAAiB,IAATD,EAAa,EAAI,GACzBG,EACEC,EAAaS,MAAK,SAACC,GAEjB,OADAC,QAAQC,IAAIF,GACLA,EAAWG,OAAM,SAACC,GAAD,OAAaN,EAASM,KAAalB,UAsBFmB,CAAYT,IAA7D,SACE,qBAAKH,UAAWF,EAAaP,EAAMY,OAD3BA,WCtC1BU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.11475c92.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\n\nconst App = () => {\n  const allCells = Array(9).fill(0);\n  const [cells, setCells] = useState(allCells);\n  const [turn, setTurn] = useState(1);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const winningState = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  const handleClick = (id) => {\n    if (cells[id] !== 0) {\n      return;\n    }\n    const newState = [...cells];\n    newState[id] = turn;\n    setCells(newState);\n    setTurn(turn === 1 ? 2 : 1);\n    setIsGameOver(\n      winningState.some((winningSet) => {\n        console.log(winningSet);\n        return winningSet.every((indices) => newState[indices] === turn)\n      })\n    )\n  }\n  const getClassName = (id) => {\n    if (id === 0) {\n      return;\n    }\n    else if (id === 1) {\n      return 'cross';\n    }\n    else if (id === 2) {\n      return 'circle';\n    }\n  }\n  return (\n    <div className=\"wrapper\">\n      {\n        !isGameOver ?\n          <div className=\"grid\">\n            {\n              allCells.map((cell, index) => (\n                <div key={index} className=\"cell\" onClick={() => handleClick(index)}>\n                  <div className={getClassName(cells[index])}></div>\n                </div>\n              ))\n            }\n          </div> :\n          <div className=\"game-over\">\n            <div className=\"game-over-box\">\n              <div className=\"game-over-text\">Game Over</div>\n              <div className=\"game-over-result\">{`${turn === 1 ? \"circle\" : \"cross\"} wins`}</div>\n            </div>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}